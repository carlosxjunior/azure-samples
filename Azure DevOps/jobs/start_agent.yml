parameters:
- name: azureSubscription
  type: string
  default: 'AzureSubscriptionServiceConnection'
- name: subscriptionId
  type: string
  default: '76c37c1c-f2c8-42b5-aa22-0696f45d8f37'
- name: rgName
  type: string
  default: 'rg-shared'
- name: vmName
  type: string
  default: 'vm-agentpool-shared-001'
- name: apiVersion
  type: string
  default: '2024-07-01'

jobs:

- job: CheckAndStartVM
  displayName: "Check and start self-hosted agent VM"
  pool: server # Agentless job
  steps:
  
  - task: HttpRequest@2
    displayName: "Check VM power state"
    inputs:
      connectedServiceName: ${{ parameters.azureSubscription }}
      method: 'GET'
      urlSuffix: '/subscriptions/${{ parameters.subscriptionId }}/resourceGroups/${{ parameters.rgName }}/providers/Microsoft.Compute/virtualMachines/${{ parameters.vmName }}?api-version=${{ parameters.apiVersion }}&$expand=InstanceView'
      headers: |
        Content-Type: application/json
    registerOutput: true
    timeoutInMinutes: 2

  - script: |
      echo "Checking VM power state..."
      echo $RESPONSE_CONTENT
      VM_STATE=$(echo "$RESPONSE_CONTENT" | jq -r '.properties.instanceView.statuses[1].code')
      echo "Current state for VM ${{ parameters.vmName }}: $VM_STATE"

      if [ "$VM_STATE" = "PowerState/running" ]; then
        echo "VM is already running. No action needed."
        exit 0
      else
        echo "VM is not running. Proceeding to start it..."
      fi
    displayName: "Evaluate VM state"
    condition: always() # Run after the previous step regardless of its outcome

  - task: HttpRequest@2
    displayName: "Start VM via REST API"
    inputs:
      connectedServiceName: ${{ parameters.azureSubscription }}
      method: 'POST'
      urlSuffix: '/subscriptions/${{ parameters.subscriptionId }}/resourceGroups/${{ parameters.rgName }}/providers/Microsoft.Compute/virtualMachines/${{ parameters.vmName }}/start?api-version=${{ parameters.apiVersion }}'
      headers: |
        Content-Type: application/json
    condition: eq(variables['VM_STATE'], 'PowerState/deallocated')

  - task: HttpRequest@2
    displayName: "Wait for VM to start"
    inputs:
      connectedServiceName: ${{ parameters.azureSubscription }}
      method: 'GET'
      urlSuffix: '/subscriptions/${{ parameters.subscriptionId }}/resourceGroups/${{ parameters.rgName }}/providers/Microsoft.Compute/virtualMachines/${{ parameters.vmName }}?api-version=${{ parameters.apiVersion }}&$expand=InstanceView'
      headers: |
        Content-Type: application/json
    retryIntervalInSeconds: 15
    retryCount: 5
    registerOutput: true

- script: |
    echo "Checking VM state..."
    echo $RESPONSE_CONTENT
    VM_STATE=$(echo "$RESPONSE_CONTENT" | jq -r '.properties.instanceView.statuses[1].code')

    if [ "$VM_STATE" = "PowerState/running" ]; then
      echo "VM is running. Proceeding to the next stage."
      exit 0
    else
      echo "VM is not yet running. Current state: $VM_STATE."
      exit 1
    fi
  displayName: "Evaluate VM State after Retry"
  condition: eq(variables['HttpRequest.ResponseCode'], 200)

